TGWTG_URL = 'http://www.redlettermedia.com'
SKIP_TITLES = ('Home', 'Articles', 'Site Stuff', 'Store', 'Community', 'Blogs')
RE_ITEM_ID = Regex('item(?P<id>\d+)')

####################################################################################################
def Start():

	ObjectContainer.title1 = 'Red Letter Media'
	HTTP.CacheTime = CACHE_1HOUR
	HTTP.Headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0'

####################################################################################################
@handler('/video/RedLetterMedia', 'That Guy With The Glasses')
@route('/video/RedLetterMedia')
def ShowSelector(parent_id=None, title=''):

	oc = ObjectContainer(title2=title)
	page = HTML.ElementFromURL(TGWTG_URL, cacheTime=CACHE_1DAY)

	if not parent_id:
		parent = page.xpath('//ul[@class="menutop"]')[0]
		children = parent.xpath('./li')
	else:
		parent = page.xpath('//li[contains(@class, "%s")]' % parent_id)[0]
		children = parent.xpath('./div/ul/li')

	for child in children:
		url = TGWTG_URL + child.xpath('./a/@href')[0]
		title = child.xpath('./a/span/text()')[0]

		if title in SKIP_TITLES:
			continue

		li_class = child.get('class')

		# If the child's class contains 'parent' then it has it's own children
		if li_class.count('parent') > 0:
			# Is a parent, extract the item
			child_id = RE_ITEM_ID.search(li_class).group('id')

			oc.add(DirectoryObject(
				key = Callback(ShowSelector, parent_id=child_id, title=title),
				title = title
			))

		else:
			# Is not a parent, is a show, so pass to ShowBrowser
			child_id = li_class

			oc.add(DirectoryObject(
				key = Callback(ShowBrowser, url=url, title=title),
				title = title
			))

	return oc

####################################################################################################
@route('/video/RedLetterMedia/show', page=int, items_per_page=int)
def ShowBrowser(url, title, page=1, items_per_page=10):

	oc = ObjectContainer(title2=title)
	videos = HTML.ElementFromURL(url).xpath('//tr[starts-with(@class, "sectiontableentry")]')
	results = {}

	if page*items_per_page > len(videos):
		max_index = len(videos)
	else:
		max_index = page*items_per_page

	@parallelize
	def GetVideos():

		for num in range((page-1)*items_per_page, max_index):
			video = videos[num]

			@task
			def GetVideo(num=num, results=results, video=video):
				media_url = '%s%s' % (TGWTG_URL, video.xpath('./td[position()=2]/a/@href')[0])
				blip_url = HTML.ElementFromURL(media_url, cacheTime=CACHE_1MONTH).xpath('//iframe[contains(@src, "blip.tv")]/@src|//embed[contains(@src, "blip.tv")]/@src')

				if len(blip_url) < 1:
					pass
				else:
					try:
						results[num] = URLService.MetadataObjectForURL(blip_url[0])
					except:
						pass

	for num in range((page-1)*items_per_page, max_index):
		if num in results and results[num]:
			oc.add(results[num])

	if max_index < len(videos):
		oc.add(NextPageObject(
			key = Callback(ShowBrowser, url=url, title=title, page=page+1),
			title = 'More ...'
		))

	if len(oc) < 1:
		return ObjectContainer(header="Error", message="This section does not contain any video")

	return oc